import { useState } from 'react';
import StarBorder from "./StartBorder";
import { generateAdvice } from '../utils/adviceEngine';
// import { saveReport, getReportsByUsername, downloadReportAsJSON, downloadReportAsText } from '../utils/reportStorage';
// import { FaFileAlt, FaFileCode } from 'react-icons/fa';
// import SavedReports from './SavedReports';

interface Stats{
  totalCommits: number;
  totalPRs: number;
  totalStars: number;
  totalIssues: number;
  followers: number;
  contributedTo: number;
} 

interface RankInfo { 
  rank: string;
  percentile: number;
  nextLevel: string|null;
  neededPoints: number;
  advice: string;

}

interface AdviceSectionProps { 
  username: string; 
  stats: Stats | null;
}


const AdviceSection:React.FC<AdviceSectionProps> = ({ username, stats }) => {
  const [rankInfo, setRankInfo] = useState<RankInfo | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [lastUsername, setLastUsername] = useState('');
  
  const downloadReportPDF = async () => {
    if (!rankInfo) return;
    
    const { jsPDF } = await import('jspdf');
    const doc = new jsPDF();
    
    let yPosition = 20;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 20;
    const lineHeight = 6;
    
    // Clean text function to remove problematic characters
    const cleanText = (text:string) => {
      return text
        .replace(/═/g, '-')
        .replace(/🎯|📊|📈|🔥|📋|🔄|🤝|⭐|👥|🏆|💡/g, '')
        .replace(/[^a-zA-Z0-9\s\n\-\+\(\)\%\:\.\,\!\?]/g, '')
        .replace(/\s+/g, ' ')
        .trim();
    };
    
    // Helper function to add text with page breaks
    const addText = (text:string, fontSize = 10, isBold = false) => {
      const cleanedText = cleanText(text);
      if (!cleanedText) return;
      
      doc.setFontSize(fontSize);
      if (isBold) doc.setFont('helvetica', 'bold');
      else doc.setFont('helvetica', 'normal');
      
      const lines = doc.splitTextToSize(cleanedText, 170);
      
      lines.forEach(line => {
        if (yPosition > pageHeight - 30) {
          doc.addPage();
          yPosition = 20;
        }
        doc.text(line, margin, yPosition);
        yPosition += lineHeight;
      });
      yPosition += 3;
    };
    
    // Title
    addText('GITHUB PROFILE ANALYSIS REPORT', 18, true);
    yPosition += 5;
    
    // User info
    addText(`Username: ${username}`, 12, true);
    addText(`Generated: ${new Date().toLocaleString()}`, 10);
    yPosition += 5;
    
    // Rank info
    addText('CURRENT STANDING', 14, true);
    addText(`Rank: ${rankInfo.rank}`, 11);
    addText(`Percentile: Top ${Math.round(rankInfo.percentile)}%`, 11);
    addText(`Next Target: ${rankInfo.nextLevel}`, 11);
    addText(`Points Needed: ${Math.ceil(rankInfo.neededPoints)}`, 11);
    yPosition += 10;
    
    // Process advice content
    addText('DETAILED RECOMMENDATIONS', 14, true);
    yPosition += 5;
    
    const adviceLines = rankInfo.advice.split('\n');
    adviceLines.forEach(line => {
      const cleanLine = cleanText(line);
      if (cleanLine) {
        // Simple header detection
        const isHeader = cleanLine.includes('PRIORITIES') || 
                        cleanLine.includes('STRATEGY') || 
                        cleanLine.includes('BUILDING') ||
                        cleanLine.includes('TARGETS') ||
                        cleanLine.includes('TIPS') ||
                        /^[A-Z\s]{8,}:?$/.test(cleanLine);
        
        if (isHeader) {
          yPosition += 3;
          addText(cleanLine, 12, true);
        } else {
          addText(cleanLine, 10);
        }
      } else {
        yPosition += 2;
      }
    });
    
    // Footer
    const totalPages = doc.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.text(`Page ${i} of ${totalPages}`, 170, pageHeight - 10);
      doc.text('Generated by GitHub Mentor', margin, pageHeight - 10);
    }
    
    doc.save(`github_advice_${username}_${new Date().toISOString().split('T')[0]}.pdf`);
  };
  
  const downloadReportTXT = () => {
    if (!rankInfo) return;
    const content = `GitHub Advice Report for ${username}
Rank: ${rankInfo.rank} (Top ${rankInfo.percentile}%)
Next Level: ${rankInfo.nextLevel}
Points Needed: ${Math.ceil(rankInfo.neededPoints)}

ADVICE:
${rankInfo.advice}`;
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `github_advice_${username}.txt`;
    link.click();
    URL.revokeObjectURL(url);
  };
  const [savedReportId, setSavedReportId] = useState<string|null>(null);

  const handleGenerateAdvice = async () => {
    if (!username || !stats) {
      setError('Username and stats required.');
      return;
    }
    
    // Check if contributedTo is available in stats
    if (!stats.contributedTo && stats.contributedTo !== 0) {
      setError('Missing contributedTo data in stats.');
      return;
    }
    
    setLoading(true);
    setError('');
    try {
      // Check if we already generated advice for this user
      if (lastUsername === username && rankInfo) {
        setLoading(false);
        return;
      }
      
      // Use local advice engine instead of external API
      const advice = generateAdvice(username, stats);
      setRankInfo(advice);
      setLastUsername(username);
      
      // Auto-save to localStorage for persistence
      const reportData = {
        ...advice,
        username,
        timestamp: new Date().toISOString(),
        id: `${username}_${Date.now()}`
      };
      
      // Save to reports collection
      const reports = JSON.parse(localStorage.getItem('github_advice_reports') || '{}');
      reports[reportData.id] = reportData;
      localStorage.setItem('github_advice_reports', JSON.stringify(reports));
      
      setSavedReportId(reportData.id);
    } catch (err) {
      setError('Failed to generate advice.');
      console.error('Advice generation error:', err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-2 rounded-2xl shadow-md mx-auto mt-10 text-center">
      {/* <h2 className="text-2xl font-semibold mb-4">GitHub Profile Advice</h2> */}
      
      {/* Show stats summary for debugging */}
      {stats && (
        <div className="mb-4 text-sm text-gray-600">
          <p>Stats: Commits: {stats.totalCommits}, PRs: {stats.totalPRs}, Stars: {stats.totalStars}, Issues: {stats.totalIssues}, Followers: {stats.followers}, Contributed: {stats.contributedTo}</p>
        </div>
      )}
      
     
      
      <StarBorder
  as="a"
  onClick={handleGenerateAdvice}
  disabled={loading || !stats}
  color="#fff"
  speed="6s"
  className="cursor-pointer cursor-target"
>
  {loading ? 'Generating...' : 'Generate Advice'}
</StarBorder>


      

      {error && <p className="mt-4 text-red-500">{error}</p>}
      
      {rankInfo && (
        <div className="mt-6 text-left p-4 rounded">
          <div className="flex justify-between items-start mb-4">
            <div>
              <p>Your rank: <strong>{rankInfo.rank}</strong> (Top {rankInfo.percentile}%).</p>
              <p>To reach <strong>{rankInfo.nextLevel}</strong>, you need ~<strong>{Math.ceil(rankInfo.neededPoints)}</strong> points.</p>
            </div>
         
          </div>
          <hr className="my-4" />
          <p className="whitespace-pre-line">{rankInfo.advice}</p>
             <div className="flex gap-2">
           
          
      <StarBorder
              as="a"
                onClick={downloadReportPDF}
              
  color="#fff"
  speed="6s"
  className="cursor-target cursor-target"
>
  PDF
</StarBorder>
             
      
      <StarBorder
              as="a"
                onClick={downloadReportTXT}
              
  color="#fff"
  speed="6s"
  className="cursor-target cursor-target"
>
   TXT
</StarBorder>

            </div>
          {savedReportId && (
            <div className="mt-4 p-2 bg-green-900 rounded text-sm">
              <p className="text-green-400">✓ Report automatically saved to your collection</p>
              <p className="text-gray-400">View all saved reports in the Reports section</p>
            </div>
          )}
        </div>
      )}
      
      {/* <SavedReports username={username} /> */}
    </div>
  );
};

export default AdviceSection;